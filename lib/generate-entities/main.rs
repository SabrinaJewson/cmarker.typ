//! A simple script to generate `../entities.rs`.
//!
//! Run:
//!
//! ```sh
//! curl -O https://html.spec.whatwg.org/entities.json
//! ```
//!
//! in the directory this file is in

fn main() {
    env::set_current_dir(env!("CARGO_MANIFEST_DIR")).unwrap();

    let json = fs::read("entities.json").unwrap();
    let entities = serde_json::from_slice::<HashMap<String, Entity>>(&json).unwrap();

    let mut map = phf_codegen::Map::new();
    let mut total = 0;
    for (name, entity) in &entities {
        let name = name.strip_prefix("&").unwrap();
        let Some(name) = name.strip_suffix(";") else {
            continue;
        };
        let value = match &*entity.characters {
            "\"" => "\\\"",
            "\\" => "\\\\",
            other => other,
        };
        let value = format!("\"{}\"", value.escape_default());
        println!("Adding {name} ⇒ {value}");
        total += 1;
        map.entry(name.as_bytes(), value);
    }
    println!("Making a map with {total} entries");
    let code = format!(
        concat!(
            "//! Generated by `generate-entities`. Don’t edit manually.\n",
            "\n",
            "#[rustfmt::skip]\n",
            "pub(crate) const ENTITIES: phf::Map<&[u8], &str> = {};\n",
        ),
        map.build()
    );

    fs::write("../entities.rs", &code).unwrap();
}

#[derive(Deserialize)]
struct Entity {
    characters: String,
}

use serde::Deserialize;
use std::collections::HashMap;
use std::env;
use std::fs;
